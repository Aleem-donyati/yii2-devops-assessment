name: Build and Deploy Yii2 App
on:
  push:
    branches: [ main ]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Download and extract Yii2 Basic Project
      - name: Create app directory
        run: mkdir -p app
        
      - name: Download Yii2 Basic Project
        run: |
          composer create-project --prefer-dist yiisoft/yii2-app-basic app/basic
      
      # Configure Yii2 application
      - name: Configure Yii2 application
        run: |
          # Generate a secret key for cookie validation
          SECRET_KEY=$(openssl rand -base64 32)
          sed -i "s/'cookieValidationKey' => ''/'cookieValidationKey' => '$SECRET_KEY'/g" app/basic/config/web.php
          
          # Configure database connection
          sed -i "s/'dsn' => 'mysql:host=localhost;dbname=yii2basic'/'dsn' => 'mysql:host=db;dbname=yii2db'/g" app/basic/config/db.php
          sed -i "s/'username' => 'root'/'username' => 'yii2user'/g" app/basic/config/db.php
          sed -i "s/'password' => ''/'password' => 'yii2password'/g" app/basic/config/db.php
      
      # Create Nginx configuration
      - name: Create Nginx configuration
        run: |
          mkdir -p docker/nginx/conf.d
          cat > docker/nginx/conf.d/default.conf << 'EOF'
          server {
              charset utf-8;
              client_max_body_size 128M;

              listen 80;
              server_name localhost;

              root /var/www/basic/web;
              index index.php;

              access_log /var/log/nginx/yii2-access.log;
              error_log /var/log/nginx/yii2-error.log;

              location / {
                  # Redirect everything that isn't a real file to index.php
                  try_files $uri $uri/ /index.php$is_args$args;
              }

              # deny accessing php files for the /assets directory
              location ~ ^/assets/.*\.php$ {
                  deny all;
              }

              location ~ \.php$ {
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  fastcgi_pass app:9000;
                  try_files $uri =404;
              }

              location ~* /\. {
                  deny all;
              }
          }
          EOF
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/yii2-app:latest,${{ secrets.DOCKER_USERNAME }}/yii2-app:${{ github.sha }}
      
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Create docker-compose.yml
        run: |
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            app:
              build:
                context: .
                dockerfile: docker/Dockerfile
              image: \${DOCKER_USERNAME:-yourname}/yii2-app:\${TAG:-latest}
              volumes:
                - ./app/basic:/var/www/basic
                - ./app/basic/runtime:/var/www/basic/runtime
                - ./app/basic/web/assets:/var/www/basic/web/assets
              environment:
                - YII_ENV=\${YII_ENV:-prod}
                - YII_DEBUG=\${YII_DEBUG:-false}
                - DB_HOST=db
                - DB_NAME=yii2db
                - DB_USER=yii2user
                - DB_PASSWORD=yii2password
              networks:
                - yii2-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:9000/ping"]
                interval: 1m
                timeout: 10s
                retries: 3
                start_period: 40s
              deploy:
                replicas: 2
                update_config:
                  parallelism: 1
                  delay: 10s
                  order: start-first
                restart_policy:
                  condition: on-failure
      
            nginx:
              image: nginx:alpine
              volumes:
                - ./app/basic/web:/var/www/basic/web
                - ./docker/nginx/conf.d:/etc/nginx/conf.d
              ports:
                - "80:80"
              depends_on:
                - app
              networks:
                - yii2-network
              deploy:
                replicas: 1
                restart_policy:
                  condition: on-failure
      
            db:
              image: mysql:8.0
              volumes:
                - yii2-db-data:/var/lib/mysql
              environment:
                - MYSQL_ROOT_PASSWORD=rootpassword
                - MYSQL_DATABASE=yii2db
                - MYSQL_USER=yii2user
                - MYSQL_PASSWORD=yii2password
              networks:
                - yii2-network
              deploy:
                replicas: 1
                restart_policy:
                  condition: on-failure
      
          networks:
            yii2-network:
              driver: overlay
      
          volumes:
            yii2-db-data:
          EOF

      
      - name: Copy docker-compose.yml and nginx config to server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /home/${{ secrets.SSH_USER }}/docker/nginx/conf.d"
          scp ./docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SSH_USER }}/docker-compose.yml
          scp ./docker/nginx/conf.d/default.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SSH_USER }}/docker/nginx/conf.d/default.conf
      
      - name: Initialize Docker Swarm (if not already)
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "docker swarm init || echo 'Swarm already initialized'"
      
      - name: Deploy to production
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd /home/${{ secrets.SSH_USER }} && \
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} && \
          export TAG=${{ github.sha }} && \
          export YII_ENV=prod && \
          export YII_DEBUG=false && \
          docker stack deploy -c docker-compose.yml yii2-app"
      
      - name: Check deployment status
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "docker service ls"
