name: Build and Deploy Yii2 App
on:
  push:
    branches: [ main ]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Create directory structure
      - name: Create directory structure
        run: |
          mkdir -p app
          mkdir -p docker/nginx/conf.d
          mkdir -p docker/php-fpm
      
      # Download and extract Yii2 Basic Project
      - name: Download Yii2 Basic Project
        run: |
          composer create-project --prefer-dist yiisoft/yii2-app-basic app/basic
      
      # Configure Yii2 application
      - name: Configure Yii2 application
        run: |
          # Generate a secret key for cookie validation
          SECRET_KEY=$(openssl rand -base64 32)
          sed -i "s/'cookieValidationKey' => ''/'cookieValidationKey' => '$SECRET_KEY'/g" app/basic/config/web.php
          
          # Configure database connection
          sed -i "s/'dsn' => 'mysql:host=localhost;dbname=yii2basic'/'dsn' => 'mysql:host=db;dbname=yii2db'/g" app/basic/config/db.php
          sed -i "s/'username' => 'root'/'username' => 'yii2user'/g" app/basic/config/db.php
          sed -i "s/'password' => ''/'password' => 'yii2password'/g" app/basic/config/db.php
      
      # Create PHP-FPM configuration
      - name: Create PHP-FPM configuration
        run: |
          cat > docker/php-fpm/www.conf << 'EOF'
          [www]
          user = yii2
          group = www-data
          listen = 0.0.0.0:9000
          pm = dynamic
          pm.max_children = 5
          pm.start_servers = 2
          pm.min_spare_servers = 1
          pm.max_spare_servers = 3
          pm.status_path = /status
          ping.path = /ping

          catch_workers_output = yes
          access.log = /proc/self/fd/2
          php_admin_value[error_log] = /proc/self/fd/2
          php_admin_flag[log_errors] = on
          EOF
      
      # Create Nginx configuration
      - name: Create Nginx configuration
        run: |
          cat > docker/nginx/conf.d/default.conf << 'EOF'
          server {
              charset utf-8;
              client_max_body_size 128M;

              listen 80;
              server_name localhost;

              root /var/www/basic/web;
              index index.php;

              access_log /var/log/nginx/yii2-access.log;
              error_log /var/log/nginx/yii2-error.log;

              location / {
                  # Redirect everything that isn't a real file to index.php
                  try_files $uri $uri/ /index.php$is_args$args;
              }

              # deny accessing php files for the /assets directory
              location ~ ^/assets/.*\.php$ {
                  deny all;
              }

              location ~ \.php$ {
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  fastcgi_pass app:9000;
                  try_files $uri =404;
              }

              location ~* /\. {
                  deny all;
              }
          }
          EOF
      
      # Create docker-compose.yml
      - name: Create docker-compose.yml
        run: |
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            app:
              image: ${DOCKER_USERNAME:-yourname}/yii2-app:${TAG:-latest}
              environment:
                - YII_ENV=${YII_ENV:-prod}
                - YII_DEBUG=${YII_DEBUG:-false}
                - DB_HOST=db
                - DB_NAME=yii2db
                - DB_USER=yii2user
                - DB_PASSWORD=yii2password
              networks:
                - yii2-network
              deploy:
                replicas: 2
                update_config:
                  parallelism: 1
                  delay: 10s
                  order: start-first
                restart_policy:
                  condition: on-failure

            nginx:
              image: nginx:alpine
              volumes:
                - ./docker/nginx/conf.d:/etc/nginx/conf.d
              ports:
                - "80:80"
              depends_on:
                - app
              networks:
                - yii2-network
              deploy:
                replicas: 1
                restart_policy:
                  condition: on-failure

            db:
              image: mysql:8.0
              volumes:
                - yii2-db-data:/var/lib/mysql
              environment:
                - MYSQL_ROOT_PASSWORD=rootpassword
                - MYSQL_DATABASE=yii2db
                - MYSQL_USER=yii2user
                - MYSQL_PASSWORD=yii2password
              networks:
                - yii2-network
              deploy:
                replicas: 1
                restart_policy:
                  condition: on-failure

          networks:
            yii2-network:
              driver: overlay

          volumes:
            yii2-db-data:
          EOF
      
      # Create Dockerfile
      - name: Create Dockerfile
        run: |
          cat > docker/Dockerfile << 'EOF'
          FROM php:8.3-fpm

          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              git \
              curl \
              libpng-dev \
              libonig-dev \
              libxml2-dev \
              zip \
              unzip \
              libzip-dev

          # Clear cache
          RUN apt-get clean && rm -rf /var/lib/apt/lists/*

          # Install PHP extensions required by Yii2
          RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip intl

          # Get latest Composer
          COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

          # Create system user to run Composer and Yii Commands
          RUN useradd -G www-data,root -u 1000 -d /home/yii2 yii2
          RUN mkdir -p /home/yii2/.composer && \
              chown -R yii2:yii2 /home/yii2

          # Set working directory
          WORKDIR /var/www

          # Create app directories with proper permissions
          RUN mkdir -p /var/www/basic/web/assets /var/www/basic/runtime && \
              chown -R yii2:www-data /var/www/basic && \
              chmod -R 775 /var/www/basic/web/assets /var/www/basic/runtime

          # Copy application files
          COPY ./app/basic /var/www/basic

          # Install dependencies as yii2 user
          USER yii2
          WORKDIR /var/www/basic
          RUN composer install --no-interaction

          # Set proper file permissions
          USER root
          RUN chown -R yii2:www-data /var/www/basic
          RUN chmod -R 755 /var/www/basic/web/assets /var/www/basic/runtime

          # Configure PHP-FPM
          COPY ./docker/php-fpm/www.conf /usr/local/etc/php-fpm.d/www.conf

          EXPOSE 9000
          CMD ["php-fpm"]
          EOF
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/yii2-app:latest,${{ secrets.DOCKER_USERNAME }}/yii2-app:${{ github.sha }}
      
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: Create server directory structure
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /home/${{ secrets.SSH_USER }}/docker/nginx/conf.d"
      
      - name: Copy docker-compose.yml and nginx config to server
        run: |
          scp ./docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SSH_USER }}/docker-compose.yml
          scp ./docker/nginx/conf.d/default.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SSH_USER }}/docker/nginx/conf.d/default.conf
      
      - name: Initialize Docker Swarm (if not already)
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "docker swarm init --advertise-addr=$(hostname -I | awk '{print $1}') || echo 'Swarm already initialized'"
      
      - name: Deploy to production
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd /home/${{ secrets.SSH_USER }} && \
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} \
          TAG=${{ github.sha }} \
          YII_ENV=prod \
          YII_DEBUG=false \
          docker stack deploy -c docker-compose.yml yii2-app"
      
      - name: Check deployment status
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "docker service ls"
